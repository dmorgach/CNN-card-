import os
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense
from keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt
import cv2
from sklearn.preprocessing import LabelEncoder

# Путь к датасету
data_dir = "C:\\Users\\dmorg\\Prog\\Neironka\\Dataset\\dataset_augmented\\train" 
image_size = (150, 150)

# Классы
suits = ['hearts', 'diamonds', 'spades', 'clubs']
values = ['ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king']
suit_to_index = {s: i for i, s in enumerate(suits)}
value_to_index = {v: i for i, v in enumerate(values)}

# Данные
X = []
y_suit = []
y_value = []

# Чтение изображений
for folder in os.listdir(data_dir):
    folder_path = os.path.join(data_dir, folder)
    if not os.path.isdir(folder_path):
        continue

    try:
        value_str, suit_str = folder.split('_of_')
    except ValueError:
        print(f'Пропущена папка: {folder}')
        continue

    if value_str not in value_to_index or suit_str not in suit_to_index:
        continue

    value_index = value_to_index[value_str]
    suit_index = suit_to_index[suit_str]

    for filename in os.listdir(folder_path):
        if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
            img_path = os.path.join(folder_path, filename)
            img = load_img(img_path, target_size=image_size)
            img_array = img_to_array(img) / 255.0
            X.append(img_array)
            y_suit.append(suit_index)
            y_value.append(value_index)

# В массивы
X = np.array(X)
y_suit_cat = to_categorical(y_suit, num_classes=4)
y_value_cat = to_categorical(y_value, num_classes=13)

# Разделение
X_train, X_test, y_suit_train, y_suit_test, y_value_train, y_value_test = train_test_split(
    X, y_suit_cat, y_value_cat, test_size=0.2, random_state=42
)

input_img = Input(shape=(150, 150, 3))
x = Conv2D(32, (3, 3), activation='relu')(input_img)
x = MaxPooling2D()(x)
x = Conv2D(64, (3, 3), activation='relu')(x)
x = MaxPooling2D()(x)
x = Flatten()(x)
x = Dense(128, activation='relu')(x)

suit_output = Dense(4, activation='softmax', name='suit')(x)
value_output = Dense(13, activation='softmax', name='value')(x)

model = Model(inputs=input_img, outputs=[suit_output, value_output])
model.compile(optimizer='adam',
              loss={'suit': 'categorical_crossentropy',
                    'value': 'categorical_crossentropy'},

              metrics={'suit':'accuracy', 'value': 'accuracy'}
)
model.summary()

early_stop = EarlyStopping(
    monitor='val_loss',         # Что отслеживать (потери на валидации)
    patience=7,                 # Сколько эпох ждать без улучшений
    restore_best_weights=True  # Вернуть лучшие веса после остановки
)
#Снять для начала работы.
'''
history=model.fit(
    X_train,
    [y_suit_train, y_value_train],
    epochs=40,
    batch_size=32,
    validation_split=0.15,
    callbacks = [early_stop]
)
model.save('card_razdel_model3.h5')

plt.figure(figsize=(12, 6))

# Потери для масти
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.title('Loss for suit & value')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Точность для масти
plt.subplot(1, 2, 2)
plt.plot(history.history['suit_accuracy'], label='train_accuracy_suit')
plt.plot(history.history['val_suit_accuracy'], label='val_accuracy_suit')
plt.plot(history.history['value_accuracy'], label='train_accuracy_value')
plt.plot(history.history['val_value_accuracy'], label='val_accuracy_value')
plt.title('Accuracy for suit & value')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

# Показать графики
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
# График потерь для масти (suit)
plt.subplot(1, 2, 1)
plt.plot(history.history['suit_loss'], label='Train Suit Loss')
plt.plot(history.history['val_suit_loss'], label='Val Suit Loss')
plt.title('Потери по масти (Suit)')
plt.xlabel('Эпоха')
plt.ylabel('Loss')
plt.legend()


# График потерь для значения (value)
plt.subplot(1, 2, 2)
plt.plot(history.history['value_loss'], label='Train Value Loss')
plt.plot(history.history['val_value_loss'], label='Val Value Loss')
plt.title('Потери по значению карты (Value)')
plt.xlabel('Эпоха')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()
'''
model = load_model('card_razdel_model3.h5')
#print(history['val_value_loss'], history['val_suit_accuracy'])
#Проверка частного случая
'''
def predict_card(path):
    img = load_img(path, target_size=image_size)
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    suit_pred, value_pred = model.predict(img_array)
    suit = suits[np.argmax(suit_pred)]
    value = values[np.argmax(value_pred)]

    return f"Карта на изображении {value} масти {suit}"

# Вывод карты
print(predict_card('C:\\Users\\dmorg\\Prog\\Neironka\\Dataset\\d\\A_spade_pix.png'))
'''



# Путь к папке с тестовыми изображениями
test_dir = "Neironka\Dataset\cards_test"

# Все файлы изображений
test_images = [f for f in os.listdir(test_dir) if f.endswith(".png")]

# Массивы
X_test = []
y_suit = []
y_value = []

# Проход по всем изображениям
for fname in test_images:
    path = os.path.join(test_dir, fname)

    # Импорт
    img = cv2.imread(path)
    img = cv2.resize(img, (150, 150))
    X_test.append(img)

    # Парсинг названия
    value, _, suit = fname.replace(".png", "").split("_")
    y_value.append(value)
    y_suit.append(suit)

X_test = np.array(X_test) / 255.0  # нормализация
value_encoder = LabelEncoder()
suit_encoder = LabelEncoder()

y_value_encoded = to_categorical(value_encoder.fit_transform(y_value))
y_suit_encoded = to_categorical(suit_encoder.fit_transform(y_suit))

# ===== ОЦЕНКА МОДЕЛИ =====
results = model.evaluate(X_test, [y_suit_encoded, y_value_encoded])
print(results)

total_loss, suit_loss, value_loss, suit_acc, value_acc = results

print(f"\n Suit Accuracy: {suit_acc:.2f}")
print(f" Value Accuracy: {value_acc:.2f}")
